{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","App","_ref3","_useState","useState","_useState2","_slicedToArray","model","setModel","_useState3","_useState4","classLabels","setClassLabels","_useState5","_useState6","loading","setLoading","_useState7","_useState8","confidence","setConfidence","_useState9","_useState10","predictedClass","setPredictedClass","useEffect","_ref","_ref2","_asyncToGenerator","_callee","_context","tf","apply","arguments","loadModel","_callee2","res","data","_context2","fetch","json","getClassLabels","readImageFile","file","reader","FileReader","onload","result","readAsDataURL","createHTMLImageElement","imageSrc","img","Image","src","React","createElement","Fragment","Grid","container","className","direction","alignItems","justifyContent","marginTop","item","style","textAlign","marginBottom","DropzoneArea","acceptedFiles","dropzoneText","onChange","_x","_callee3","files","image","_tf$tidy","_tf$tidy2","_predictedClass","_confidence","_context3","tensorImg","fromPixels","resizeNearestNeighbor","toFloat","expandDims","predict","predictions","dataSync","predicted_index","as1D","argMax","Math","round","maxFileSize","filesLimit","showAlerts","Stack","width","spacing","Chip","label","concat","variant","Backdrop","sx","color","zIndex","theme","drawer","open","CircularProgress","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.819f7c45.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { DropzoneArea } from \"material-ui-dropzone\";\nimport { Backdrop, Chip, CircularProgress, Grid, Stack } from \"@mui/material\";\nfunction App() {\n  const [model, setModel] = useState(null);\n  const [classLabels, setClassLabels] = useState(null);\n  \n  const [loading, setLoading] = useState(false);\n  const [confidence, setConfidence] = useState(null);\n  const [predictedClass, setPredictedClass] = useState(null);\n  useEffect(() => {\n    const loadModel = async () => {\n      const model_url = \"tfjs/MobileNetV3Large/model.json\";\n  \n      const model = await tf.loadGraphModel(model_url);\n  \n      setModel(model);\n    };\n  \n    const getClassLabels = async () => {\n      const res = await fetch(\n        \"https://raw.githubusercontent.com/anishathalye/imagenet-simple-labels/master/imagenet-simple-labels.json\"\n      );\n  \n      const data = await res.json();\n  \n      setClassLabels(data);\n    };\n  \n    loadModel();\n    getClassLabels();\n  }, []);\n  const readImageFile = (file) => {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n  \n      reader.onload = () => resolve(reader.result);\n  \n      reader.readAsDataURL(file);\n    });\n  };\n  \n  const createHTMLImageElement = (imageSrc) => {\n    return new Promise((resolve) => {\n      const img = new Image();\n  \n      img.onload = () => resolve(img);\n  \n      img.src = imageSrc;\n    });\n  };\n\n  const handleImageChange = async (files) => {\n    if (files.length === 0) {\n      setConfidence(null);\n      setPredictedClass(null);\n    }\n  \n    if (files.length === 1) {\n      setLoading(true);\n  \n      const imageSrc = await readImageFile(files[0]);\n      const image = await createHTMLImageElement(imageSrc);\n  \n      // tf.tidy for automatic memory cleanup\n      const [predictedClass, confidence] = tf.tidy(() => {\n        const tensorImg = tf.browser.fromPixels(image).resizeNearestNeighbor([224, 224]).toFloat().expandDims();\n        const result = model.predict(tensorImg);\n  \n        const predictions = result.dataSync();\n        const predicted_index = result.as1D().argMax().dataSync()[0];\n  \n        const predictedClass = classLabels[predicted_index];\n        const confidence = Math.round(predictions[predicted_index] * 100);\n  \n        return [predictedClass, confidence];\n      });\n      \n      setPredictedClass(predictedClass);\n      setConfidence(confidence);\n      setLoading(false);\n    }\n  };\n  return (\n\n    <Fragment>\n    <Grid container className=\"App\" direction=\"column\" alignItems=\"center\" justifyContent=\"center\" marginTop=\"12%\">\n      <Grid item>\n        <h1 style={{ textAlign: \"center\", marginBottom: \"1.5em\" }}>MobileNetV3 Image Classifier</h1>\n        <DropzoneArea\n          acceptedFiles={[\"image/*\"]}\n          dropzoneText={\"Add an image\"}\n          onChange={handleImageChange}\n          maxFileSize={10000000}\n          filesLimit={1}\n          showAlerts={[\"error\"]}\n        />\n        <Stack style={{ marginTop: \"2em\", width: \"12rem\" }} direction=\"row\" spacing={1}>\n          <Chip\n            label={predictedClass === null ? \"Prediction:\" : `Prediction: ${predictedClass}`}\n            style={{ justifyContent: \"left\" }}\n            variant=\"outlined\"\n          />\n          <Chip\n            label={confidence === null ? \"Confidence:\" : `Confidence: ${confidence}%`}\n            style={{ justifyContent: \"left\" }}\n            variant=\"outlined\"\n          />\n        </Stack>\n      </Grid>\n    </Grid>\n\n    <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  </Fragment>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}